import os

from aiogram import types
from aiogram.dispatcher import FSMContext
from data.config import ADMIN_ID
from filters.is_admin import IsAdmin
from googleapiclient.errors import HttpError
from loader import bot, dp
from states.loadState import YoutubeLoadState
from utils.yotube_uploader import send_video


@dp.message_handler(IsAdmin(), commands='start')
async def start(message: types.Message):
  markup = types.ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton(text='üìπ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ'))
  await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω!\n\n<b>–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ID: {}</b>\n\n–í–∞—à–µ –º–µ–Ω—é üëáüëáüëá'.format("".join(str(ADMIN_ID))), reply_markup=markup)

@dp.message_handler(IsAdmin(), lambda m: m.text == 'üìπ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ')
async def upload_video(message: types.Message):
  markup = types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel'))
  await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å...', reply_markup=markup)

  await YoutubeLoadState.title.set()

@dp.message_handler(IsAdmin(), state=YoutubeLoadState.title)
async def upload_video_title_set(message: types.Message, state: FSMContext):
  async with state.proxy() as data:
    data['title'] = message.text

  await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ...')
  
  await YoutubeLoadState.next()

@dp.message_handler(IsAdmin(), state=YoutubeLoadState.description)
async def upload_video_description_set(message: types.Message, state: FSMContext):
  async with state.proxy() as data:
    data['description'] = message.text

  await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ...')

  await YoutubeLoadState.next()

@dp.message_handler(IsAdmin(), content_types=["video"], state=YoutubeLoadState.video)
async def upload_video_video_set(message: types.Message, state: FSMContext):
  async with state.proxy() as data:
    title = data['title']
    description = data['description']

  await message.video.download()
  dirs = os.listdir('videos')
  try:
    send_video(title=title, description=description, video=f'videos/{dirs[-1]}')
    os.remove(path=f'videos/{dirs[-1]}')
    await message.answer('OK!')
    await state.finish()
  except HttpError:
    await message.answer('–õ–∏–º–∏—Ç –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ –∏—Å—á–µ—Ä–ø–∞–Ω! –°–º–µ–Ω–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç.')
    await state.finish()


@dp.callback_query_handler(IsAdmin(), lambda c: c.data == 'cancel', state=YoutubeLoadState.title)
async def upload_video_title_cancel(callback: types.CallbackQuery, state: FSMContext):

  await state.finish()
  await callback.message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É!')

@dp.callback_query_handler(IsAdmin(), lambda c: c.data == 'cancel', state=YoutubeLoadState.description)
async def upload_video_description_cancel(callback: types.CallbackQuery, state: FSMContext):

  await state.finish()
  await callback.message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É!')

@dp.callback_query_handler(IsAdmin(), lambda c: c.data == 'cancel', state=YoutubeLoadState.video)
async def upload_video_cancel(callback: types.CallbackQuery, state: FSMContext):

  await state.finish()
  await callback.message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É!')
